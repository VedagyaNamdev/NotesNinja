import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import { prisma } from '@/lib/prisma';

export async function GET(req: NextRequest) {
  try {
    // Get the session with proper auth options
    const session = await getServerSession(authOptions);
    
    if (!session || !session.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    // Fetch user data from database to get the most up-to-date information
    try {
      const userId = session.user.id;
      const user = await prisma.user.findUnique({
        where: { id: userId }
      });
      
      if (!user) {
        // User not found in database, return session data as fallback
        console.warn(`User ${userId} not found in database, returning session data`);
        return NextResponse.json({
          id: session.user.id || 'unknown',
          name: session.user.name,
          email: session.user.email,
          image: session.user.image,
          role: session.user.role || 'student', // Default to student if no role set
          lastSignIn: null
        });
      }
      
      // Return user data from database
      return NextResponse.json({
        id: user.id,
        name: user.name,
        email: user.email,
        image: user.image,
        role: user.role,
        lastSignIn: user.lastSignIn
      });
    } catch (dbError) {
      console.error(`Error fetching user from database:`, dbError);
      
      // If DB fetch fails, return session data as fallback
      return NextResponse.json({
        id: session.user.id || 'unknown',
        name: session.user.name,
        email: session.user.email,
        image: session.user.image,
        role: session.user.role || 'student', // Default to student if no role set
        lastSignIn: null
      });
    }
  } catch (err) {
    return NextResponse.json({ 
      error: 'Internal server error',
      details: err instanceof Error ? err.message : String(err)
    }, { status: 500 });
  }
} 